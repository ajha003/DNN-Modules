<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="ControlTitle_settings.Text" xml:space="preserve">
    <value>ContactUs Settings</value>
  </data>
  <data name="lblAdminEmail.Text" xml:space="preserve">
    <value>Admin Email Id</value>
  </data>
  <data name="lblAdminEmailSubject.Text" xml:space="preserve">
    <value>Admin Email Subject</value>
  </data>
  <data name="lblTemplate.Help" xml:space="preserve">
    <value>Allows you to provide a custom template for displaying the items. Use parameters for dynamic substitution ( ie. [CONTENT] [CREATEDDATE] [CREATEDBYUSER] [CREATEDBYUSERNAME] )</value>
  </data>
  <data name="lblTemplate.Text" xml:space="preserve">
    <value>Template</value>
  </data>
  <data name="ModuleHelp.Text" xml:space="preserve">
    <value>About ContactUs Settings</value>
  </data>
  <data name="lblSMTPSSlEnable.Text" xml:space="preserve">
    <value>SMTP Enable SSL</value>
  </data>
  <data name="lblSMTPUsername.Text" xml:space="preserve">
    <value>SMTP Username</value>
  </data>
  <data name="CustomerEmailSubject.Help" xml:space="preserve">
    <value>Set Customer Email Subject</value>
  </data>
  <data name="CustomerEmailSubject.Text" xml:space="preserve">
    <value>Customer Email Subject</value>
  </data>
  <data name="lblAdminEmail.Help" xml:space="preserve">
    <value>Set Admin Email Address for Receiving Mail</value>
  </data>
  <data name="lblAdminEmailSubject.Help" xml:space="preserve">
    <value>Set Admin Email Subject</value>
  </data>
  <data name="lblAdminMailBody.Help" xml:space="preserve">
    <value>Set Admin Mail Body</value>
  </data>
  <data name="lblAdminMailBody.Text" xml:space="preserve">
    <value>Admin Mail body</value>
  </data>
  <data name="lblCustomerEmailBody.Help" xml:space="preserve">
    <value>Set Customer Mail Body</value>
  </data>
  <data name="lblCustomerEmailBody.Text" xml:space="preserve">
    <value>Customer Mail Body</value>
  </data>
  <data name="lblMailSetting.Help" xml:space="preserve">
    <value>You can set SMTP Server here ,If not set it uses default bia host setting</value>
  </data>
  <data name="lblSMTPSSlEnable.Help" xml:space="preserve">
    <value>Set SSL Enable</value>
  </data>
  <data name="lblSMTPUsername.Help" xml:space="preserve">
    <value>Set SMTP Username</value>
  </data>
  <data name="lblusersetting.Help" xml:space="preserve">
    <value>Check this , If you want to send user mail </value>
  </data>
  <data name="lblusersetting.Text" xml:space="preserve">
    <value>Is user mail</value>
  </data>
  <data name="InvalidEmailID.Text" xml:space="preserve">
    <value>Invalid Email ID</value>
  </data>
  <data name="AdminMail.Text" xml:space="preserve">
    <value>Administrator Mail Configuration</value>
  </data>
  <data name="Collapse.Text" xml:space="preserve">
    <value>Collapse All</value>
  </data>
  <data name="Expand.Text" xml:space="preserve">
    <value>Expand All</value>
  </data>
  <data name="SMTP.Text" xml:space="preserve">
    <value>SMTP Server Configuration</value>
  </data>
  <data name="TokensAdmin.Text" xml:space="preserve">
    <value>&lt;b&gt;Tokens &gt;&gt;&lt;/b&gt;&lt;br /&gt;Put this keys with inside [ ] to get dynamic field values &lt;br /&gt;[CustomerName],[CustomerEmail],[CustomerMessage],[DateTime]</value>
  </data>
  <data name="TokensUser.Text" xml:space="preserve">
    <value>&lt;b&gt;Tokens &gt;&gt;&lt;/b&gt;&lt;br /&gt; Put this keys with inside [ ] to replace dynamic field values. &lt;br /&gt; [CustomerName]</value>
  </data>
  <data name="ValidEmail.Text" xml:space="preserve">
    <value>You must enter a valid email address.</value>
  </data>
  <data name="lblEmailRequire.Help" xml:space="preserve">
    <value>Check if email is require field!</value>
  </data>
  <data name="lblEmailRequire.Text" xml:space="preserve">
    <value>Is Email Require</value>
  </data>
  <data name="lblPhoneRequire.Help" xml:space="preserve">
    <value>Check if phone is require field!</value>
  </data>
  <data name="lblPhoneRequire.Text" xml:space="preserve">
    <value>Is Phone Require</value>
  </data>
  <data name="CustomerSettings.Text" xml:space="preserve">
    <value>Customer Email Settings</value>
  </data>
  <data name="lblSentForm.Help" xml:space="preserve">
    <value>Reply to email address</value>
  </data>
  <data name="lblSentForm.Text" xml:space="preserve">
    <value>Reply to</value>
  </data>
</root>